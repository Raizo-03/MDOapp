CREATE DATABASE MDOdb;

USE MDOdb;

CREATE TABLE IF NOT EXISTS Users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id VARCHAR(20) NOT NULL UNIQUE,
    umak_email VARCHAR(100) NOT NULL UNIQUE,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    password VARCHAR(255) NOT NULL,
    verified BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS Admins (
    admin_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

USE MDOdb;
CREATE TABLE UserProfile (
    profile_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    contact_number VARCHAR(15),
    address VARCHAR(255),
    guardian_contact_number VARCHAR(15),
    guardian_address VARCHAR(255),
    profile_image VARCHAR(255), -- URL or path to the profile image
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);


INSERT INTO Admins (username, email, password) VALUES
('admin1', 'admin1@example.com', '123');

USE MDOdb;

CREATE TABLE IF NOT EXISTS Bookings (
    booking_id INT AUTO_INCREMENT PRIMARY KEY,
    umak_email VARCHAR(100) NOT NULL, -- Reference the umak_email field in Users table
    service VARCHAR(100) NOT NULL,
    service_type VARCHAR(100) NOT NULL,
    booking_date DATE NOT NULL, -- Date in the format MM/dd/yyyy
    booking_time TIME NOT NULL, -- Time in the format hh:mm AM/PM
    remarks TEXT, -- Optional remarks
    status ENUM('Pending', 'Approved', 'Completed', 'No Show') DEFAULT 'Pending', -- Status column with default value 'Pending'
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp for booking creation
    FOREIGN KEY (umak_email) REFERENCES Users(umak_email) -- Establish relationship with Users table
);

CREATE TABLE IF NOT EXISTS Messages (
    message_id INT AUTO_INCREMENT PRIMARY KEY,
    sender_email VARCHAR(100) NOT NULL,
    receiver_email VARCHAR(100) NOT NULL,
    message TEXT NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status ENUM('unread', 'read') DEFAULT 'unread' NOT NULL
);

CREATE TABLE IF NOT EXISTS Notes (
    note_id INT AUTO_INCREMENT PRIMARY KEY,
    umak_email VARCHAR(100) NOT NULL, -- Reference the umak_email field in Users table
    title VARCHAR(255) NOT NULL,
    symptoms TEXT NOT NULL,
    mood VARCHAR(50),
    medicine TEXT,
    created_at DATETIME NOT NULL, -- Explicitly set date and time when created
    FOREIGN KEY (umak_email) REFERENCES Users(umak_email)
);

CREATE TABLE Feedback (
    id INT AUTO_INCREMENT PRIMARY KEY,                       -- Unique feedback ID
    user_email VARCHAR(100) NOT NULL,                         -- User's email (foreign key to users)
    booking_id INT NOT NULL,                                  -- Booking ID (foreign key to bookings)
    name VARCHAR(100) NOT NULL,                               -- Name of the user providing feedback
    service VARCHAR(100) NOT NULL,                            -- Service feedback is related to
    service_type VARCHAR(100) NOT NULL,                       -- Type of service
    rating INT NOT NULL,                                      -- Rating given by the user (1-5)
    message TEXT NOT NULL,                                    -- Feedback message
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,           -- Timestamp of when feedback was created
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- Timestamp for updates
    FOREIGN KEY (user_email) REFERENCES Users(umak_email) ON DELETE CASCADE,  -- Foreign key to users
    FOREIGN KEY (booking_id) REFERENCES Bookings(booking_id) ON DELETE CASCADE -- Foreign key to bookings
);



